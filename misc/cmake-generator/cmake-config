#!/usr/bin/env python

import os.path, sys, ConfigParser

def read_config(config_file, section, options, source):
    if os.path.exists(config_file):
        config = ConfigParser.ConfigParser()
        print "configuration file:", config_file
        config.optionxform=str # make ConfigParser case-sensitive
        config.read(config_file)
        if config.has_section(section):
            for key in config.options(section):
                options[key] = config.get(section, key)
    
def generate_config(module, source, compiler):
    print "component:", module
    if source == "":
        home = os.environ["HOME"]
        if os.path.exists(os.path.join("src", module, "CMakeLists.txt")):
            source = os.path.realpath(os.path.join("src", module))
        elif os.path.exists(os.path.join(home, "development", module, "CMakeLists.txt")):
            source = os.path.realpath(os.path.join(home, "development", module))
        elif os.path.exists(os.path.join(home, "src", module, "CMakeLists.txt")):
            source = os.path.realpath(os.path.join(home, "src", module))
    else:
        source = os.path.realpath(source)
        if not os.path.exists(os.path.join(source, "CMakeLists.txt")):
            print "Error: source file not found"
            sys.exit(255)
    cmake_command = "cmake " + source

    options = {}
    options["CMAKE_INSTALL_PREFIX"] = os.getcwd()
    build_conf = "build"
    if compiler != "":
        build_conf += "-" + compiler
    build_conf += ".conf"
    if not os.path.exists(build_conf):
        print "Error:", build_conf, "not found"
        sys.exit(255)
    read_config(build_conf, "option", options, source)
    build_rokko_conf = "build-" + module + ".conf"
    if not os.path.exists(build_rokko_conf):
        print "Error:", build_rokko_conf, "not found"
        sys.exit(255)
    read_config(build_rokko_conf, "option", options, source)
    for k in sorted(options.keys()):
        cmake_command += " -D" + k + "=" + options[k]

    print "source:", source
    print "install prefix:", options["CMAKE_INSTALL_PREFIX"]

    cmake_stem = "cmake-" + module
    module_dir = module
    if compiler != "":
        cmake_stem += "-" + compiler
        module_dir += "-" + compiler
    script = open(os.path.join(os.getcwd(), cmake_stem + ".sh"), 'w')
    script.write("mkdir -p " + module_dir + "\n")
    script.write("rm -f " + os.path.join(module_dir, "CMakeCache.txt") + '\n')
    script.write("rm -f " + os.path.join(module_dir, "CPackConfig.cmake") + '\n')
    script.write("rm -f " + os.path.join(module_dir, "CPackSourceConfig.cmake") + '\n')
    script.write("rm -rf " + os.path.join(module_dir, "CMakeFiles/2.*") + '\n')
    script.write("cd " + module_dir + '\n')
    script.write(cmake_command + '\n')
    script.write("cp -fp CMakeCache.txt " + os.path.join("..", cmake_stem + ".cache") + "\n")
    script.close()
    print "script:", cmake_stem + ".sh"

## main routine
if __name__ == "__main__":
    if os.path.exists("CMakeLists.txt"):
        print "Error: " + sys.argv[0] + " should be run in build directory."
        sys.exit(255)
    if len(sys.argv) < 2:
        print "Error:", sys.argv[0], "module_name [source_directory]"
        sys.exit(255)
    module = sys.argv[1]
    source = ""
    if len(sys.argv) > 2:
        source = sys.argv[2]
    compiler = ""
    if len(sys.argv) > 3:
        compiler = sys.argv[3]        
    ret = generate_config(module, source, compiler)
    if ret != 0:
        sys.exit(255)
