# - Try to find Elemental
# It bases on the FindSLEPc.cmake
# Once done this will define
#
#  ELEMENTAL_FOUND        - system has SLEPc
#  ELEMENTAL_INCLUDE_DIR  - include directories for SLEPc
#  ELEMENTAL_LIBARIES     - libraries for SLEPc
#  ELEMENTAL_DIR          - directory where SLEPc is built
#

message(STATUS "Checking for package 'Elemental'")

# List of possible locations for ELEMENTAL_DIR
set(elemental_dir_locations "")
list(APPEND elemental_dir_locations "/usr/lib/elemental-0.77")
list(APPEND elemental_dir_locations "/usr/local/lib/elemental-0.77")
#list(APPEND elemental_dir_locations "$ENV{HOME}/elemental-0.77")

# Add other possible locations for ELEMENTAL_DIR
set(_SYSTEM_LIB_PATHS "${CMAKE_SYSTEM_LIBRARY_PATH};${CMAKE_PLATFORM_IMPLICIT_LINK_DIRECTORIES}")
string(REGEX REPLACE ":" ";" libdirs ${_SYSTEM_LIB_PATHS})
message(STATUS "Display libdirs=${libdirs}.")

foreach (libdir ${libdirs})
  get_filename_component(elemental_dir_location "${libdir}/" PATH)
  list(APPEND elemental_dir_locations ${elemental_dir_location})
endforeach()

# Try to figure out ELEMENTAL_DIR by finding elemental.h
find_path(VERIFIED_ELEMENTAL_DIR include/elemental.hpp
  HINTS ${ELEMENTAL_DIR} $ENV{ELEMENTAL_DIR}
  PATHS ${elemental_dir_locations}
  DOC "Elemental directory")

# Report result of search for ELEMENTAL_DIR
#if (${VERIFIED_ELEMENTAL_DIR})
if (VERIFIED_ELEMENTAL_DIR)
  message(STATUS "VERIFIED_ELEMENTAL_DIR is ${VERIFIED_ELEMENTAL_DIR}")
else(VERIFIED_ELEMENTAL_DIR)
  message(SEND_ERROR "${VERIFIED_ELEMENTAL_DIR} does not have include/elemental.hpp.  It's not probably Elementral directory.")
endif(VERIFIED_ELEMENTAL_DIR)



# Get variables from Elemental configuration
find_library(ELEMENTAL_LIBRARY
  NAMES elemental
  HINTS ${ELEMENTAL_DIR}/lib $ENV{ELEMENTAL_DIR}/lib
  DOC "The Elemetnal library"
  )
mark_as_advanced(ELEMENTAL_LIBRARY)
message(STATUS "ELEMENTAL_LIBRARY is ${ELEMENTAL_LIBRARY}")

# Create a temporary Makefile to probe the Elemental configuration
set(elemental_config_makefile ${PROJECT_BINARY_DIR}/Makefile.elemental)
file(WRITE ${elemental_config_makefile}
  "# This file was autogenerated by FindElemental.cmake
include ${ELEMENTAL_DIR}/conf/elemvariables
show :
	-@echo -n \${\${VARIABLE}}
")

# Define macro for getting Elemental variables from Makefile
macro(ELEMENTAL_GET_VARIABLE var name)
  set(${var} "NOTFOUND" CACHE INTERNAL "Cleared" FORCE)
  execute_process(COMMAND ${CMAKE_MAKE_PROGRAM} --no-print-directory -f ${elemental_config_makefile} show VARIABLE=${name} ELEMENTAL_DIR=${ELEMENTAL_DIR}
    OUTPUT_VARIABLE ${var}
    RESULT_VARIABLE elemental_return)
endmacro()

# Call macro to get the SLEPc variables
#message(STATUS "elemental_dir="${ELEMENTAL_DIR})
elemental_get_variable(ELEM_LIBS ELEM_LIBS)  # library name
elemental_get_variable(ELEM_LIB ELEM_LIB)  # library directory
elemental_get_variable(ELEM_INC ELEM_INC)
elemental_get_variable(MATH_LIBS MATH_LIBS)


# Remove temporary Makefile
file(REMOVE ${elemental_config_makefile})

# Extract include paths and libraries from compile command line
include(ResolveCompilerPaths)
resolve_libraries(ELEMENTAL_LIBRARIES "-L${ELEM_LIB} ${ELEM_LIBS}" )

# Add variables to CMake cache and mark as advanced
set(ELEMENTAL_INCLUDE_DIRS ${ELEM_INC} CACHE STRING "Elemental include paths." FORCE)
set(ELEMENTAL_LIBRARIES ${ELEMENTAL_LIBRARIES} ${MATH_LIBS} CACHE STRING "Elemental libraries." FORCE)
mark_as_advanced(ELEMENTAL_INCLUDE_DIRS ELEMENTAL_LIBRARIES)

# Set flags for building test program
#set(CMAKE_REQUIRED_INCLUDES ${SLEPC_INCLUDE_DIRS} ${PETSC_INCLUDE_DIRS})
#set(CMAKE_REQUIRED_LIBRARIES ${SLEPC_LIBRARIES} ${PETSC_LIBRARIES})
