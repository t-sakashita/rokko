diff -U1 -rN EigenExa-2.7.orig/CMakeLists.txt EigenExa-2.7/CMakeLists.txt
--- EigenExa-2.7.orig/CMakeLists.txt	1970-01-01 09:00:00.000000000 +0900
+++ EigenExa-2.7/CMakeLists.txt	2021-02-28 18:04:01.000000000 +0900
@@ -0,0 +1,31 @@
+cmake_minimum_required(VERSION 3.1)
+project(EigenExa NONE)
+enable_language(C Fortran)
+option(BUILD_SHARED_LIBS "Build shared libraries" ON)
+option(USE_C_LINKER "Use C Linker instead of Fortran" OFF)
+list(APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR})
+
+# RPATH setting
+set(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib")
+set(CMAKE_SKIP_BUILD_RPATH FALSE)
+set(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE)
+set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
+set(CMAKE_MACOSX_RPATH 1)
+
+# OpenMP
+find_package(OpenMP)
+if(OPENMP_FOUND)
+  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
+  # Almost always OpenMP flags are same both for C and for Fortran.
+  set(CMAKE_Fortran_FLAGS "${CMAKE_Fortran_FLAGS} ${OpenMP_Fortran_FLAGS}")
+endif(OPENMP_FOUND)
+
+# MPI library
+find_package(MPI)
+
+# ScaLAPACK library
+find_package(ScaLAPACK REQUIRED)
+string(REGEX REPLACE ";" " " SCAPALACK_LIBS "${SCAPALACK_LIBRARIES}")
+
+add_subdirectory(src)
+add_subdirectory(benchmark)
diff -U1 -rN EigenExa-2.7.orig/FindScaLAPACK.cmake EigenExa-2.7/FindScaLAPACK.cmake
--- EigenExa-2.7.orig/FindScaLAPACK.cmake	1970-01-01 09:00:00.000000000 +0900
+++ EigenExa-2.7/FindScaLAPACK.cmake	2021-02-28 18:14:30.000000000 +0900
@@ -0,0 +1,145 @@
+# - Try to find ScaLAPACK
+# Once done this will define
+#
+#  SCALAPACK_FOUND        - system has ScaLAPACK
+#  SCALAPACK_LIBRARIES     - libraries for ScaLAPACK
+
+if(DEFINED SCALAPACK_FOUND)
+  return()
+endif(DEFINED SCALAPACK_FOUND)
+
+message(STATUS "Checking for ScaLAPACK library")
+
+if(DEFINED SCALAPACK_LIB)
+  set(SCALAPACK_FOUND TRUE)
+  set(SCALAPACK_LIBRARIES ${SCALAPACK_LIB})
+  message(STATUS "ScaLAPACK libraries: ${SCALAPACK_LIBRARIES}")
+  return()
+endif(DEFINED SCALAPACK_LIB)
+
+if(DEFINED BLAS_mkl_core_LIBRARY)
+
+  find_library(_SCALAPACK_LIBRARY
+    NAMES mkl_scalapack_lp64
+    PATHS $ENV{MKLROOT}/lib/intel64 $ENV{MKLROOT}/lib/em64t
+    DOC "The ScaLAPACK library")
+  if(_SCALAPACK_LIBRARY)
+    list(APPEND _SCALAPACK_LIBRARIES ${_SCALAPACK_LIBRARY})
+  else(_SCALAPACK_LIBRARY)
+    message(STATUS "ScaLAPACK library: not found")
+    set(SCALAPACK_FOUND FALSE)
+    return()
+  endif(_SCALAPACK_LIBRARY)
+
+  # Check whether SGI MPT is used
+  try_compile(_SGI_MPT
+    ${CMAKE_CURRENT_BINARY_DIR}
+    ${CMAKE_CURRENT_SOURCE_DIR}/config/check_sgimpt.c
+    OUTPUT_VARIABLE LOG)
+  if(_SGI_MPT)
+    find_library(_SCALAPACK_BLACS_LIBRARY
+      NAMES mkl_blacs_sgimpt_lp64
+      PATHS $ENV{MKLROOT}/lib/intel64 $ENV{MKLROOT}/lib/em64t
+      DOC "The BLACS library")
+    MESSAGE(STATUS "SGI MPT is used")
+  else(_SGI_MPT)
+    try_compile(_OPENMPI
+      ${CMAKE_CURRENT_BINARY_DIR}
+      ${CMAKE_CURRENT_SOURCE_DIR}/config/check_openmpi.c
+      OUTPUT_VARIABLE LOG)
+    if(_OPENMPI)
+      find_library(_SCALAPACK_BLACS_LIBRARY
+        NAMES mkl_blacs_openmpi_lp64
+        PATHS $ENV{MKLROOT}/lib/intel64 $ENV{MKLROOT}/lib/em64t
+        DOC "The BLACS library")
+      MESSAGE(STATUS "OpenMPI is used")
+    else(_OPENMPI)
+      find_library(_SCALAPACK_BLACS_LIBRARY
+        NAMES mkl_blacs_intelmpi_lp64
+        PATHS $ENV{MKLROOT}/lib/intel64 $ENV{MKLROOT}/lib/em64t
+        DOC "The BLACS library")
+      MESSAGE(STATUS "Intel MPI/MPICH2/MVAPICH is used")
+    endif(_OPENMPI)
+  endif(_SGI_MPT)
+  if(_SCALAPACK_BLACS_LIBRARY)
+    list(APPEND _SCALAPACK_LIBRARIES ${_SCALAPACK_BLACS_LIBRARY})
+  endif(_SCALAPACK_BLACS_LIBRARY)
+
+else(DEFINED BLAS_mkl_core_LIBRARY)
+
+  # Standard search path
+  set(_PATHS "")
+  if(SCALAPACK_DIR)
+    set(_PATHS ${SCALAPACK_DIR})
+  else(SCALAPACK_DIR)
+    list(APPEND _PATHS
+  	 ${SCALAPACK_ROOT}/${CMAKE_BUILD_TYPE}
+	 ${SCALAPACK_ROOT}
+  	 $ENV{SCALAPACK_ROOT}/${CMAKE_BUILD_TYPE}
+	 $ENV{SCALAPACK_ROOT}
+  	 ${ROKKO_SOLVER_ROOT}/scalapack/${CMAKE_BUILD_TYPE}
+	 ${ROKKO_SOLVER_ROOT}/scalapack
+  	 $ENV{ROKKO_SOLVER_ROOT}/scalapack/${CMAKE_BUILD_TYPE}
+	 $ENV{ROKKO_SOLVER_ROOT}/scalapack
+	 ${CMAKE_INSTALL_PREFIX}/scalapack/${CMAKE_BUILD_TYPE}
+	 ${CMAKE_INSTALL_PREFIX}/${CMAKE_BUILD_TYPE}
+	 $ENV{HOME}/rokko/scalapack/${CMAKE_BUILD_TYPE}
+	 $ENV{HOME}/rokko/scalapack
+	 /opt/rokko/scalapack/${CMAKE_BUILD_TYPE}
+	 /opt/rokko/scalapack
+	 /opt/rokko/${CMAKE_BUILD_TYPE}
+	 /opt/rokko
+	 /opt/local /opt
+	 )
+    list(APPEND _PATHS /usr/lib64/openmpi) # for CentOS
+  endif(SCALAPACK_DIR)
+
+  foreach (_PATH ${_PATHS})
+    list(APPEND _LIBPATHS "${_PATH}/lib")
+  endforeach()
+
+  find_library(_SCALAPACK_LIBRARY
+    NAMES scalapack scalapack-openmpi scalapack-mpich
+    PATHS ${_LIBPATHS}
+    DOC "The ScaLAPACK library")
+  if(_SCALAPACK_LIBRARY)
+    list(APPEND _SCALAPACK_LIBRARIES ${_SCALAPACK_LIBRARY})
+  else(_SCALAPACK_LIBRARY)
+    message(STATUS "ScaLAPACK library: not found")
+    set(SCALAPACK_FOUND FALSE)
+    return()
+  endif(_SCALAPACK_LIBRARY)
+
+  find_library(_BLACS_LIBRARY
+    NAMES blacs-openmpi blacs-mpich
+    PATHS ${_LIBPATHS}
+    DOC "The ScaLAPACK BLACS library")
+  find_library(_BLACSC_LIBRARY
+    NAMES blacsCinit-openmpi blacsCinit-mpich
+    PATHS ${_LIBPATHS}
+    DOC "The ScaLAPACK BLACS C library")
+  find_library(_BLACSF77_LIBRARY
+    NAMES blacsF77init-openmpi blacsF77init-mpich
+    PATHS ${_LIBPATHS}
+    DOC "The ScaLAPACK BLACS F77 library")
+  if(_BLACSF77_LIBRARY)
+    list(APPEND _SCALAPACK_LIBRARIES ${_BLACSF77_LIBRARY})
+  endif(_BLACSF77_LIBRARY)
+  if(_BLACSC_LIBRARY)
+    list(APPEND _SCALAPACK_LIBRARIES ${_BLACSC_LIBRARY})
+  endif(_BLACSC_LIBRARY)
+  if(_BLACS_LIBRARY)
+    list(APPEND _SCALAPACK_LIBRARIES ${_BLACS_LIBRARY})
+  endif(_BLACS_LIBRARY)
+  if(_BLACSF77_LIBRARY)
+    list(APPEND _SCALAPACK_LIBRARIES ${_BLACSF77_LIBRARY})
+  endif(_BLACSF77_LIBRARY)
+  if(_BLACSC_LIBRARY)
+    list(APPEND _SCALAPACK_LIBRARIES ${_BLACSC_LIBRARY})
+  endif(_BLACSC_LIBRARY)
+
+endif(DEFINED BLAS_mkl_core_LIBRARY)
+
+set(SCALAPACK_FOUND TRUE)
+set(SCALAPACK_LIBRARIES ${_SCALAPACK_LIBRARIES})
+message(STATUS "ScaLAPACK libraries: ${SCALAPACK_LIBRARIES}")
diff -U1 -rN EigenExa-2.7.orig/benchmark/CMakeLists.txt EigenExa-2.7/benchmark/CMakeLists.txt
--- EigenExa-2.7.orig/benchmark/CMakeLists.txt	1970-01-01 09:00:00.000000000 +0900
+++ EigenExa-2.7/benchmark/CMakeLists.txt	2021-02-28 18:04:29.000000000 +0900
@@ -0,0 +1,12 @@
+include_directories(${PROJECT_BINARY_DIR}/src)
+
+add_executable(main2 main2.f mat_set.f ev_test.f w_test.f)
+target_include_directories(main2 PUBLIC ${CMAKE_BINARY_DIR}/src/modules)
+target_link_libraries(main2 EigenExa)
+
+if(USE_C_LINKER)
+  set_target_properties(main2 PROPERTIES LINKER_LANGUAGE C)
+endif(USE_C_LINKER)
+
+# copying input file in build directory
+configure_file(IN IN COPYONLY)
diff -U1 -rN EigenExa-2.7.orig/src/CMakeLists.txt EigenExa-2.7/src/CMakeLists.txt
--- EigenExa-2.7.orig/src/CMakeLists.txt	1970-01-01 09:00:00.000000000 +0900
+++ EigenExa-2.7/src/CMakeLists.txt	2021-02-28 18:21:29.000000000 +0900
@@ -0,0 +1,84 @@
+add_definitions(-DUSE_SYNC=1 -D_DEBUG_=0 -D_DEBUG2_=0 -DAT_BCAST_OVERLAP=1 -DOVERLAP_DECISION_TYPE=3)
+
+set(SOURCES MPI_Allreduce_group.F90
+   miscC.c
+   CSTAB.F
+   eigen_house.F
+   eigen_dc.F
+   eigen_trbak.F
+   eigen_blacs.F
+   eigen_devel.F
+   comm.F
+   eigen_libs0.F
+   eigen_libs.F
+   FS_const.F90
+   FS_libs.F90
+   FS_prof.F90
+   dlacpy.F
+   dlaed6_common.F
+   dlaed6_init.F
+   lapack_eigen.F
+   my_pdlaedz.F
+   my_pdlaed3.F
+   my_pdlaed2.F
+   my_pdlaed1.F
+   my_pdlaed0.F
+   my_pdlasrt.F
+   my_pdsxedc.F
+   mx_pdlaedz.F
+   mx_pdlaed3.F
+   mx_pdlaed2.F
+   mx_pdlaed1.F
+   mx_pdlaed0.F
+   mx_pdstedc.F
+   dc_redist1.F
+   dc_redist1_r.F
+   dc_redist2.F
+   dc_redist2_r.F
+   dc2.F
+   dcx.F
+   bisect.F
+   bisect2.F
+   eigen_t1.F
+   eigen_trd_t2.F
+   eigen_trd_t4.F
+   eigen_trd_t5.F
+   eigen_trd_t5x.F
+   eigen_trd_t6_3.F
+   eigen_trd_t7.F
+   eigen_trd_t8.F
+   eigen_trd.F
+   eigen_prd_t2.F
+   eigen_prd_t4x.F
+   eigen_prd_t5.F
+   eigen_prd_t6_3.F
+   eigen_prd_t7.F
+   eigen_prd_t8.F
+   eigen_prd.F
+   trbakwy4_body.F
+   trbakwy4.F
+   eigen_scaling.F
+   eigen_identity.F
+   eigen_sx.F
+   eigen_s.F
+   FS_dividing.F90
+   FS_EDC.F90
+   FS_PDLAED0.F90
+   FS_PDLAED1.F90
+   FS_PDLAED2.F90
+   FS_PDLAED3.F90
+   FS_PDLAEDZ.F90
+   FS_MERGE_D.F90
+   FS_REDUCE_ZD.F90
+   FS_PDLASRT.F90
+   FS2eigen_PDLASRT.F90
+   dc2_FS.F
+   eigen_FS.F
+   FS_memory_internal.F
+   KMATH_EIGEN_GEV.F)
+
+add_library(EigenExa ${SOURCES})
+target_link_libraries(EigenExa ${SCALAPACK_LIBRARIES} ${MPI_Fortran_LIBRARIES})
+set_target_properties(EigenExa PROPERTIES Fortran_MODULE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/modules)
+install(TARGETS EigenExa ARCHIVE DESTINATION lib LIBRARY DESTINATION lib RUNTIME DESTINATION bin)
+install(DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/modules/ DESTINATION include)
